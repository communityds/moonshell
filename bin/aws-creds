#!/usr/bin/env ruby
#
# Config parser that creates Bash env vars
#
# To quickly and easily use different credentials, configure different profiles
# with the aws-cli:
#   $ aws configure --profile $PROFILE
#
# This script echoes the possible profile options if called without parameters.
#
# To best use this script, evaluate it:
#   $ `aws-creds dev`
#
# Because we output everything to STDERR this script is safe to eval :D
#

require 'parseconfig'

credentials = ParseConfig.new("#{ENV['HOME']}/.aws/credentials")
config = ParseConfig.new("#{ENV['HOME']}/.aws/config")

@profiles = credentials.groups
@p_params = credentials.params
@configs = config.groups
@c_params = config.params

def profiles
  STDERR.puts "Usage: #{File.basename(__FILE__)} PROFILE|show"
  STDERR.puts
  if ENV['AWS_ACCOUNT_NAME']
    STDERR.puts 'Current profile:'
    STDERR.puts "  #{ENV['AWS_ACCOUNT_NAME']}"
    STDERR.puts
  end
  STDERR.puts 'Available profiles:'
  @profiles.each { |p| STDERR.puts "  #{p}" }
end

def echo_params(profile)
  # Because fuck aws, the 'profile' header in config is different from
  # 'credentials'..
  config_profile = "profile #{profile}"
  puts "export AWS_REGION=#{@c_params[config_profile]['region']}"
  # See moon.sh for why we set AWS_ACCOUNT_NAME instead of AWS_DEFAULT_PROFILE
  puts "export AWS_ACCOUNT_NAME=#{profile}"
  puts "export AWS_ACCESS_KEY_ID=#{@p_params[profile]['aws_access_key_id']}"
  # rubocop:disable Metrics/LineLength
  puts "export AWS_SECRET_ACCESS_KEY=#{@p_params[profile]['aws_secret_access_key']}"
  # rubocop:enable Metrics/LineLength
end

if ARGV.count < 1
  profiles
  exit
elsif ARGV[0] == 'show'
  ENV.sort.each do |env|
    puts "#{env[0]}=#{env[1]}" if env[0].start_with?('AWS')
  end
  exit
elsif !@profiles.find_index(ARGV[0])
  STDERR.puts 'Profile must be valid'
  profiles
  exit
else
  profile = ARGV[0]
end

echo_params(profile)
