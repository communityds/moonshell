#!/usr/bin/env bash
#
# This script updates the default certificate for an ELB
#

source $(dirname $0)/../moon.sh

if [[ $# -lt 1 ]]; then
    echoerr "Usage: $(basename $0) ENVIRONMENT [CERTIFICATE_NAME] [ELB_LOGICAL_ID]"
    exit 0
else
    ENVIRONMENT=$1
    IAM_CERT_NAME=${2-}
    ELB_LOGICAL_ID=${3-}
fi

stack_name
ELB_PORT=443

echoerr "INFO: Enumerating available server certificates"
IAM_SERVER_CERTIFICATES=($(aws iam list-server-certificates \
    --query "ServerCertificateMetadataList[].ServerCertificateName" \
    --output text))

[[ -z ${IAM_SERVER_CERTIFICATES[@]-} ]] \
    && echoerr "ERROR: Could not find any server certificates.." \
    && exit 1

if [[ ${IAM_CERT_NAME-} ]]; then
    if ! contains ${IAM_CERT_NAME} ${IAM_SERVER_CERTIFICATES[@]}; then
        echoerr "ERROR: Certificate '${IAM_CERT_NAME}' does not exist"
        exit 1
    fi
else
    echo "Choose a certificate to use:"
    IAM_CERT_NAME="$(choose ${IAM_SERVER_CERTIFICATES[@]})"
fi

echoerr "INFO: Outputting certificate details:"
iam-certificate-details ${IAM_CERT_NAME}

echoerr "INFO: Querying certificate ARN"
IAM_CERT_ARN="$(aws iam list-server-certificates \
    --region ${AWS_REGION} \
    --query "ServerCertificateMetadataList[?ServerCertificateName=='${IAM_CERT_NAME}'].Arn" \
    --output text)"
echoerr "INFO: Certificate ARN: ${IAM_CERT_ARN}"

echoerr "INFO: Finding stack resources"
STACK_RESOURCES_JSON=$(aws cloudformation list-stack-resources \
    --region ${AWS_REGION} \
    --stack-name "${STACK_NAME}" \
    --query "StackResourceSummaries[]")
STACK_RESOURCE_TYPES=($(echo ${STACK_RESOURCES_JSON} \
    | jq -r '.[].ResourceType'))

# ELB or ELBv2?
if contains AWS::ElasticLoadBalancingV2::LoadBalancer ${STACK_RESOURCE_TYPES[@]}; then
    echoerr "INFO: Finding Listeners to update"
    ELB_LISTENERS=($(echo ${STACK_RESOURCES_JSON} | jq -r '.[] | select(.ResourceType == "AWS::ElasticLoadBalancingV2::Listener") | .LogicalResourceId'))

    if [[ ${ELB_LOGICAL_ID-} ]]; then
        if contains ${ELB_LOGICAL_ID} ${ELB_LISTENERS[@]-} 2>/dev/null; then
            echoerr "INFO: Found defined Listener"
            ELB_LISTENER=${ELB_LOGICAL_ID}
        else
            echoerr "ERROR: Listener '${ELB_LOGICAL_ID}' is not a resource of '${STACK_NAME}'"
            exit 1
        fi
    elif [[ ${#ELB_LISTENERS[@]} -gt 1 ]]; then
        # Try to find a Listener labelled as "https"
        for listener in ${ELB_LISTENERS[@]}; do
            if [[ ${listener} =~ HTTPS|https ]]; then
                echoerr "INFO: Found HTTPS Listener: '${listener}'"
                ELB_LISTENER=${listener}
            fi
        done
        if [[ -z ${ELB_LISTENER-} ]]; then
            echoerr "Choose the Listener to update:" \
            ELB_LISTENER=$(choose ${ELB_LISTENERS[@]})
        fi
    else
        echoerr "INFO: Using default Listener"
        ELB_LISTENER=${ELB_LISTENERS}
    fi

    ELB_LISTENER_ARN=$(echo ${STACK_RESOURCES_JSON} | jq -r ".[] | select(.LogicalResourceId == \"${ELB_LISTENER}\") | .PhysicalResourceId")
    echoerr "INFO: Listener ARN: '${ELB_LISTENER_ARN}'"

    DEFAULT_CERTIFICATE=$(aws elbv2 describe-listener-certificates --listener-arn ${ELB_LISTENER_ARN} \
        | jq -r '.Certificates[] | select(.IsDefault == true) | .CertificateArn')
    echoerr "INFO: Found default certificate ARN: '${DEFAULT_CERTIFICATE}'"

    if [[ ${DEFAULT_CERTIFICATE} == ${IAM_CERT_ARN} ]]; then
        echoerr "WARNING: Updating default certificate"
        DEFAULT=true
    else
        DEFAULT=false
    fi

    ELB_CERTIFICATES=($(aws elbv2 describe-listener-certificates \
        --listener-arn ${ELB_LISTENER_ARN} \
        | jq -r '.Certificates[].CertificateArn'))

    if contains ${IAM_CERT_ARN} ${ELB_CERTIFICATES[@]-}; then
        ELB_CERTIFICATES=(${ELB_CERTIFICATES[@]/$IAM_CERT_ARN})
        TMP_DEFAULT=${ELB_CERTIFICATES[0]}

        if [[ ${DEFAULT} == true ]]; then
            if [[ ${TMP_DEFAULT-} ]]; then
                echoerr "WARNING: Switching default certificate"
                aws elbv2 modify-listener \
                    --listener-arn ${ELB_LISTENER_ARN} \
                    --certificates CertificateArn=${TMP_DEFAULT}

                echoerr "INFO: Removing existing certificate"
                aws elbv2 remove-listener-certificates \
                    --listener-arn ${ELB_LISTENER_ARN} \
                    --certificates CertificateArn=${IAM_CERT_ARN}
                aws elbv2 remove-listener-certificates \
                    --listener-arn ${ELB_LISTENER_ARN} \
                    --certificates CertificateArn=${IAM_CERT_ARN} \
                    || true
            fi
        else
            echoerr "INFO: Removing existing certificate"
            aws elbv2 remove-listener-certificates \
                --listener-arn ${ELB_LISTENER_ARN} \
                --certificates CertificateArn=${IAM_CERT_ARN}
        fi
    fi

    echoerr "INFO: Adding certificate to Listener"
    aws elbv2 add-listener-certificates \
        --listener-arn ${ELB_LISTENER_ARN} \
        --certificates CertificateArn=${IAM_CERT_ARN}

    if [[ ${DEFAULT} == true ]]; then
        echoerr "INFO: Setting certificate as default"
        aws elbv2 modify-listener \
            --listener-arn ${ELB_LISTENER_ARN} \
            --certificates CertificateArn=${IAM_CERT_ARN}
    fi
else
    STACK_ELBS=($(stack_resource_type_id ${STACK_NAME} "AWS::ElasticLoadBalancing::LoadBalancer"))
    HTTPS_ELBS=($(aws elb describe-load-balancers \
        --region ${AWS_REGION} \
        --load-balancer-names ${STACK_ELBS[@]} \
        | jq -r ".LoadBalancerDescriptions[] \
            | select(.ListenerDescriptions[].Listener.Protocol == \"HTTPS\") \
            | .LoadBalancerName"))

    [[ ${#HTTPS_ELBS[@]} -gt 1 ]] \
        && echo "Choose an ELB to update:" \
        && ELB_NAME=$(choose ${HTTPS_ELBS[@]}) \
        || ELB_NAME=${HTTPS_ELBS}

    echoerr "INFO: Setting ELB '${ELB_NAME}' with new certificate"
    aws elb set-load-balancer-listener-ssl-certificate \
        --region ${AWS_REGION} \
        --load-balancer-name ${ELB_NAME} \
        --load-balancer-port ${ELB_PORT} \
        --ssl-certificate-id ${IAM_CERT_ARN}
fi

