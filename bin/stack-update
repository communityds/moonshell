#!/usr/bin/env bash
#
#
#

source $(dirname $0)/../moon.sh

if [[ $# -lt 1 ]]; then
    echoerr "Usage: $(basename $0) ENVIRONMENT [OPTIONS]"
    echoerr
    echoerr "Options:"
    echoerr "   -d        DEBUG=true. Default: false"
    echoerr "   -y        Assume yes. Default: prompt"
    exit
else
    export ENVIRONMENT=$1
    shift 1
fi

ASSUME_YES=false
while getopts "dy" option; do
    case ${option} in
        d)
            DEBUG=true
            set -x ;;
        y) ASSUME_YES=true ;;
    esac
done


# STACK_NAME
stack_name
# STACK_TEMPLATE_BUCKET
stack_template_bucket
# STACK_TEMPLATE_BUCKET_SCHEME
stack_template_bucket_scheme
# STACK_TEMPLATE_FILE
stack_template_file
# STACK_PARAMETER_FILE
stack_parameter_file

if [[ ${STACK_TEMPLATE_BUCKET_SCHEME} =~ file ]]; then
    TEMPLATE_SWITCH="--template-body"
else
    TEMPLATE_SWITCH="--template-url"
fi

START_SECONDS=$(date +%s)
SLEEP_DELAY=10


echoerr "INFO: Parsing: ${STACK_PARAMETER_FILE}"
declare -A PARAMS
stack_parameter_file_parse ${STACK_PARAMETER_FILE} PARAMS

echoerr "INFO: Gathering existing parameters"
STACK_PARAMETERS=($(aws cloudformation get-template-summary \
    --region ${AWS_REGION} \
    --stack-name ${STACK_NAME}  \
    | jq -r '.Parameters[].ParameterKey'))
if [[ -z ${STACK_PARAMETERS-} ]]; then
    echoerr "ERROR: Could not find any parameters"
    exit 1
fi

echoerr "INFO: Parsing parameters"
for param in ${!PARAMS[@]}; do
    if ! contains ${param} ${STACK_PARAMETERS[@]-}; then
        STACK_PARAMETERS+=(${param})
    fi
done

for param in ${STACK_PARAMETERS[@]-}; do
    if grep -q ${param} ${STACK_TEMPLATE_FILE}; then
        if contains ${param} ${!PARAMS[@]}; then
            PARAM_JSON+=",{\"ParameterKey\":\"${param}\",\"ParameterValue\":\"${PARAMS[$param]}\"}"
        else
            PARAM_JSON+=",{\"ParameterKey\":\"${param}\",\"UsePreviousValue\":true}"
        fi
    else
        echoerr "INFO: Skipping removed parameter: ${param}"
    fi
done

if [[ ${ASSUME_YES-} == false ]]; then
    if prompt_no "Do you wish to update '${STACK_NAME}'?"; then
        echoerr "INFO: Exiting on user request"
        exit
    fi
fi

stack_template_upload

echoerr "INFO: Updating: ${STACK_NAME}"
# If when updating a stack the uploaded template does not precipitate change,
# the return code is 255, so we have to test both the command and its output to
# decipher if there is actually no change
CFN_CMD="aws cloudformation update-stack \
    --region ${AWS_REGION} \
    --stack-name ${STACK_NAME} \
    --parameters '[${PARAM_JSON#,}]' \
    ${TEMPLATE_SWITCH} ${STACK_TEMPLATE_BUCKET_SCHEME}${STACK_TEMPLATE_BUCKET}.s3-${AWS_REGION}.amazonaws.com/${STACK_NAME}/$(basename ${STACK_TEMPLATE_FILE}) \
    --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM"
${CFN_CMD} \
    2>&1 \
    | grep -q 'No updates are to be performed' \
    | true
STATUS=(${PIPESTATUS[@]})

# If the first process exited 255
# And the output from the command matched the very specific grep
# Or the first process exited 0
# Then, we're cool
if [[ ${STATUS[0]} == 0 ]]; then
    echoerr "INFO: Update triggered. Waiting for stack update to complete"
elif [[ ${STATUS[0]} == 255 ]] && [[ ${STATUS[1]} == 0 ]]; then
    echoerr "INFO: No updates are to be performed"
    exit
else
    echoerr "ERROR: Failed to update stack '${STACK_NAME}'"
    echoerr "INFO: Attempted command:"
    echo ${CFN_CMD}
    exit ${STATUS[0]}
fi

echoerr "INFO: Waiting for stack update to complete"
aws cloudformation wait \
    stack-update-complete \
    --region ${AWS_REGION} \
    --stack-name ${STACK_NAME} \
    &>/dev/null &

WAIT_PID=$!

until ! kill -s 0 ${WAIT_PID} &>/dev/null; do
    sleep ${SLEEP_DELAY}
    STACK_STATUS=$(stack_status ${STACK_NAME})
    echoerr "INFO: Stack status: ${STACK_STATUS}"
done

if [[ ! ${STACK_STATUS} == "UPDATE_COMPLETE" ]]; then
    echoerr "WARNING: Stack did not update successfully"
    EXIT=1
fi

echoerr "INFO: $(basename $0) completed with status '$(stack_status ${STACK_NAME})' in '$(($(date +%s) - ${START_SECONDS}))' seconds"
exit ${EXIT-0}

