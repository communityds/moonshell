#!/usr/bin/env bash
#
# Set the desired capacity for an ASG in a stack.
#
# This is particularly handy for when something has happened that causes
# codedeploy to always fail deployment which in turn kills the server.
# After a default 5 tries the autoscaling group will be left empty, this
# script lets you easily set it back to 1 for retrying.
#

source $(dirname $0)/../moon.sh

if [[ $# -lt 2 ]]; then
    echoerr "Usage: $(basename $0) ENVIRONMENT ASG_PREFIX [DESIRED_CAPACITY]"
    echoerr
    echoerr "Example:"
    echoerr "  $ $(basename $0) dev app"
    echoerr "  $ $(basename $0) staging cache 2"
    echoerr "  $ $(basename $0) production Utility"
    echoerr ""
    echoerr "DESIRED_CAPACITY defaults to: 1"
    exit
else
    ENVIRONMENT=$1
    ASG_PREFIX=$2
    DESIRED_CAPACITY=${3:-1}
fi

stack_name

echoerr "INFO: Finding all ASGs for stack '${STACK_NAME}'"
AUTO_SCALING_GROUPS=($(stack_resource_type_id ${STACK_NAME} "AWS::AutoScaling::AutoScalingGroup"))

for asg in ${AUTO_SCALING_GROUPS[@]}; do
    if matches ${ASG_PREFIX,,} ${asg,,}; then
        echoerr "INFO: Found matching Autoscaling Group '${asg}'"
        AUTO_SCALING_GROUP=${asg}
        break
    fi
done

if [[ -z ${AUTO_SCALING_GROUP-} ]]; then
    echoerr "ERROR: Could not find a matching Autoscaling Group for '${ASG_PREFIX}'"
    exit 1
fi

echoerr "INFO: Setting desired capacity for '${AUTO_SCALING_GROUP}' to '${DESIRED_CAPACITY}'"
aws autoscaling set-desired-capacity \
    --region ${AWS_REGION} \
    --auto-scaling-group-name ${AUTO_SCALING_GROUP} \
    --desired-capacity ${DESIRED_CAPACITY}

