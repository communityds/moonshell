#!/usr/bin/env bash
#
#
#

source $(dirname $0)/../moon.sh

if [[ $# -lt 1 ]]; then
    echoerr "Usage: $(basename $0) ENVIRONMENT"
    exit
else
    export ENVIRONMENT=$1
fi

stack_name

echoerr "INFO: Discovering nested stacks"
NESTED_STACKS=($(stack_list_nested ${STACK_NAME}))

echoerr "INFO: Discovering autoscaling groups"
for stack in ${STACK_NAME} ${NESTED_STACKS[@]-}; do
    AUTOSCALING_GROUPS+=($(stack_resource_type_id ${stack} "AWS::AutoScaling::AutoScalingGroup" 2>/dev/null || true))
done

for autoscaling_group in ${AUTOSCALING_GROUPS[@]-}; do
    autoscaling_group_json=$(aws autoscaling describe-auto-scaling-groups \
        --auto-scaling-group-names ${autoscaling_group})

    echoerr "INFO: AutoScalingGroupName:  $(echo ${autoscaling_group_json} | jq -r '.AutoScalingGroups[].AutoScalingGroupName')"
    echoerr "INFO: MinSize:               $(echo ${autoscaling_group_json} | jq -r '.AutoScalingGroups[].MinSize')"
    echoerr "INFO: MaxSize:               $(echo ${autoscaling_group_json} | jq -r '.AutoScalingGroups[].MaxSize')"
    echoerr "INFO: DesiredCapacity:       $(echo ${autoscaling_group_json} | jq -r '.AutoScalingGroups[].DesiredCapacity')"
    echoerr "INFO: LoadBalancerName:      $(echo ${autoscaling_group_json} | jq -r '.AutoScalingGroups[].LoadBalancerNames[]')"
    echoerr "INFO: TargetGroupARNs:       $(echo ${autoscaling_group_json} | jq -r '.AutoScalingGroups[].TargetGroupARNs[]')"

    if [[ ${autoscaling_group_json} =~ "LaunchTemplate" ]]; then
        launch_template_version=$(echo ${autoscaling_group_json} | jq -r '.AutoScalingGroups[].LaunchTemplate.Version')

        echoerr "INFO: LaunchTemplateId:      $(echo ${autoscaling_group_json} | jq -r '.AutoScalingGroups[].LaunchTemplate.LaunchTemplateId')"
        echoerr "INFO: LaunchTemplateVersion: ${launch_template_version}"
    fi

    instance_ids=($(echo ${autoscaling_group_json} | jq -r '.AutoScalingGroups[].Instances[].InstanceId'))

    instances_json=$(aws ec2 describe-instances \
        --instance-ids ${instance_ids[@]-} \
        --query "Reservations[].Instances[]")

    for instance_id in ${instance_ids[@]-}; do
        instance_json=$(echo ${instances_json} | jq ".[] | select(.InstanceId == \"${instance_id}\")")
        instance_asg_json=$(echo ${autoscaling_group_json} | jq ".AutoScalingGroups[].Instances[] | select(.InstanceId == \"${instance_id}\")")

        echoerr "INFO:     InstanceId:              ${instance_id}"
        echoerr "INFO:          LaunchTime:              $(echo ${instance_json} | jq -r '.LaunchTime')"
        echoerr "INFO:          PrivateIpAddress:        $(echo ${instance_json} | jq -r '.PrivateIpAddress')"
        echoerr "INFO:          PublicIpAddress:         $(echo ${instance_json} | jq -r '.PublicIpAddress')"
        echoerr "INFO:          ImageId:                 $(echo ${instance_json} | jq -r '.ImageId')"
        echoerr "INFO:          InstanceType:            $(echo ${instance_asg_json} | jq -r '.InstanceType')"
        echoerr "INFO:          AvailabilityZone:        $(echo ${instance_asg_json} | jq -r '.AvailabilityZone')"
        echoerr "INFO:          LifecycleState:          $(echo ${instance_asg_json} | jq -r '.LifecycleState')"
        echoerr "INFO:          HealthStatus:            $(echo ${instance_asg_json} | jq -r '.HealthStatus')"

        if [[ ${launch_template_version-} ]]; then
            template_version=$(jq -r '.LaunchTemplate.Version' <<<${instance_asg_json})
            template_id=$(jq -r '.LaunchTemplate.LaunchTemplateId' <<<${instance_asg_json})
            if [[ ${launch_template_version} == ${template_version} ]]; then
                echoerr "INFO:          LaunchTemplateVersion:   ${template_version}"
            else
                echoerr "INFO:          LaunchTemplateVersion:   out-of-date"
            fi
        else
            # An instance does not always have a LaunchConfiguration
            echoerr "INFO:          LaunchConfigurationName: $(echo ${instance_asg_json} | jq -r '.LaunchConfigurationName' 2>/dev/null)"
        fi
    done

    unset launch_template_version

    if [[ ${#AUTOSCALING_GROUPS[@]} -gt 1 ]] && [[ ! ${autoscaling_group} == ${AUTOSCALING_GROUPS[-1]} ]]; then
        echoerr "INFO:"
    fi
done
