#!/usr/bin/env bash
#
# This script automates the building of AMIs. It is effectively a wrapper for
# Packer. When you create or update a JSON file in the packer/ dir, you simply
# re-run this tool. If you are adding/creating a new JSON config file.
#
# Some packer templates have variables in them. For further information on how
# to use packer variables, please go here:
#   https://www.packer.io/docs/templates/user-variables.html
#
# If you wish to debug this script, execute the following prior to running the
# script:
#
#   export DEBUG=true
#
# NOTE: For ami-clean to work properly you MUST set a role tag in your packer
# config:
#
# { "builders": [{ "tags": { "role": "$role_of_this_ami" } }] }
#

export MOON_FILE=false
source $(dirname $0)/../moon.sh

PACKER_DIR="${MOON_VAR}/packer"
PACKER_VER="1.2.1"
PACKER_FILE="packer_${PACKER_VER}_$(uname -s | tr A-Z a-z)_amd64.zip"
PACKER_BASE="https://releases.hashicorp.com/packer/${PACKER_VER}"
PACKER_URL="${PACKER_BASE}/${PACKER_FILE}"
PACKER_LOG=1
PACKER_DEBUG=
VERBOSE=

[[ ! -d packer ]] \
    && echoerr "ERROR: Dir 'packer' does not exist." \
    && echoerr "Are you in the correct repo?" \
    && exit 1

[[ ! -d ${PACKER_DIR} ]] && mkdir ${PACKER_DIR}

# pipe delimited string of AMIs to build - CLASSES="foo|bar|baz"
# foo.json, bar.json and baz.json must exist in the packer directory.
CLASSES="$(find packer/ -name '*.json' -exec basename -s .json '{}' \; | sort)"

BUILD_ROOT="${PWD}"


# Functions
#
usage () {
    [[ ${1-} ]] \
        && local retr=$1 \
        || local retr=0
    classes_with_pipes=$(echo ${CLASSES}| sed 's/ /\|/g')
    echoerr "Usage: $(basename $0) [-d] [-v] [all|${classes_with_pipes}] [PACKER_ARGS]"
    echoerr
    echoerr "  -d  Debug. Make packer require input for each step."
    echoerr "  -v  Verbose. Show packer 'ui' output."
    echoerr
    echoerr "Example:"
    echoerr "  $ $(basename $0) varnish -var 's3_bucket=foo-artifacts'"
    exit ${retr}
}

log () {
    local message="$@"
    echo "$(date +%Y-%m-%dT%H:%M:%S) ${message}" >> ${LOG}
    echoerr "${message}"
}

verify_class_file () {
    local class classes=($@)
    for class in ${classes[@]}; do
        [[ ! -f "${BUILD_ROOT}/packer/${class}.json" ]] \
            && log "ERROR: Class file '${class}.json' does not exist in ${PWD}/packer/" \
            && exit 1
    done
    return 0
}

install_packer () {
    pushd ${PACKER_DIR} >/dev/null
    [[ ! -f "${PACKER_FILE}" ]] \
        && wget -q -c ${PACKER_URL} \
        && unzip -x ${PACKER_FILE}
    [[ ! -x "./packer" ]] \
        && log "ERROR: Packer failed to extract cleanly or is not executable" \
        && exit 1
    popd >/dev/null
}

pack () {
    local class=$1
    local log_file="${LOG}"

    local ami_id retr

    log "INFO: Building AMI from ${class}.json at $(date +%Y-%m-%dT%H:%M:%S). Outputting to '${log_file}'"
    if [[ ${PACKER_DEBUG-} ]]; then
        if [[ ${VERBOSE-} ]]; then
            ${PACKER_DIR}/packer build -debug ${PACKER_ARGS-} packer/${class}.json >>${log_file} 2>&1
            retr=$?
        else
            ${PACKER_DIR}/packer build -debug ${PACKER_ARGS-} packer/${class}.json | tee -a ${log_file}
            retr=${PIPESTATUS[0]}
        fi
    elif [[ ${VERBOSE-} ]]; then
        ${PACKER_DIR}/packer build ${PACKER_ARGS-} packer/${class}.json 2>&1 | tee -a ${log_file}
        retr=${PIPESTATUS[0]}
    else
        ${PACKER_DIR}/packer build ${PACKER_ARGS-} packer/${class}.json >>${log_file} 2>&1
        retr=$?
    fi

    if [[ ${retr} == 0 ]]; then
        log "INFO: Finished building AMI from ${class}.json at $(date +%Y-%m-%dT%H:%M:%S)"
        ami_id=$(grep -Eo "ami-[0-9a-f]{8,17}" ${log_file} | tail -1)
        log "INFO: ${class} AMI: ${ami_id}"
    else
        log "ERROR: Build failed with status '${retr}'"
        exit ${retr}
    fi
}

main () {
    local class
    local -a classes=($@)
    verify_class_file ${classes[@]}
    local start_time=$(date +%s)

    log "INFO: Starting image building"
    pushd "${BUILD_ROOT}" > /dev/null
        log "INFO: Verifying packer"
        install_packer

        for class in ${classes[@]}; do
            pack ${class}
        done
    popd > /dev/null

    log "INFO: Building finished"
    log "INFO: Total build time: $(( $(date +%s) - ${start_time} )) seconds"
}


# Begining
#
while getopts "dv" option; do
    case ${option} in
        d) PACKER_DEBUG=true ;;
        v) VERBOSE=true ;;
    esac
done

[[ ${PACKER_DEBUG-} ]] && shift
[[ ${VERBOSE-} ]] && shift

if [[ $# == 0 ]]; then
    usage 0
elif [[ $1 == "all" ]]; then
    shift
    PACKER_ARGS="$@"
    export LOG="${PACKER_DIR}/all-$(date +%s).log"
    main ${CLASSES[@]}
elif [[ $1 =~ [${CLASSES}] ]]; then
    CLASS=$1
    shift
    PACKER_ARGS="$@"
    export LOG="${PACKER_DIR}/${CLASS}-$(date +%s).log"
    main ${CLASS}
else
    usage 1
fi

