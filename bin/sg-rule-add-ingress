#!/usr/bin/env bash
#
# Create a new ingress or egress rule.
#
# We do not support specifying a source-security-group-id, as that is something
# which should be done via a template modification and adds too much complexity
# to this simple little script.
#

source $(dirname $0)/../moon.sh

BASENAME=$(basename $0)

if [[ $# -lt 5 ]]; then
    echoerr "Usage: ${BASENAME} ENVIRONMENT SG_NAME|SG_ID PROTOCOL PORT CIDR"
    echoerr
    echoerr "Example:"
    echoerr "  $ ${BASENAME} dev MySecurityGroup tcp 443 10.1.2.0/24"
    echoerr "  $ ${BASENAME} staging AnotherSecurityGroup icmp -1 54.123.54.123/32"
    echoerr "  $ ${BASENAME} production YetAnotherSecurityGroup udp 1-65535 10.0.0.0/8"
    exit 0
else
    ENVIRONMENT=$1
    SG=$2
    PROTOCOL=$3
    PORT=$4
    CIDR=$5
fi

export STACK_NAME="${APP_NAME}-${ENVIRONMENT}"


#
# Input Sanitisation
#
if [[ ! ${SG} =~ ^sg- ]]; then
    SG_ID=$(stack_resource_id ${STACK_NAME} ${SG})
else
    SG_ID=${SG}
fi

if ! contains ${PROTOCOL} icmp tcp udp; then
    echoerr "ERROR: Unsupported protocol '${PROTOCOL}'"
    exit 1
fi


if [[ ! ${PORT} == -1 ]]; then
    # Support port ranges '1-65535'
    ports=(${PORT%-*} ${PORT#*-})
    for port in ${ports[@]}; do
        if [[ ${port} -lt 1 ]] || [[ ${port} -gt 65535 ]]; then
            echoerr "ERROR: Unsupported port '${port}'"
            exit 1
        fi
    done
fi

OCTET="([0-9]|[0-9]{2}|1[0-9]{2}|2([0-4][0-9]|5[0-5]))"
VLSM="([0-9]|[1-2][0-9]|3[0-2])"

if ! echo ${CIDR} | grep -qP "${OCTET}\.${OCTET}\.${OCTET}\.${OCTET}\/${VLSM}$"; then
    echoerr "ERROR: Unsupported CIDR notation '${CIDR}'"
    exit 1
fi

echo "${SG_ID} ${PROTOCOL} ${PORT} ${CIDR}"

DIRECTION=${BASENAME##*-}

echoerr "INFO: Creating ${DIRECTION} rule in '${SG_ID}'"
aws ec2 authorize-security-group-${DIRECTION} \
    --region ${AWS_REGION} \
    --group-id ${SG_ID} \
    --port ${PORT} \
    --protocol ${PROTOCOL} \
    --cidr ${CIDR}

