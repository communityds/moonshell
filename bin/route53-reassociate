#!/usr/bin/env bash
#
# If the route53 association between two stacks has become corrupted, then this
# script will redo the association. It is only needed in rare occasions.
#

source $(dirname $0)/../moon.sh

#
# Intro
#
if [[ $# -lt 2 ]]; then
    echoerr "Usage $(basename $0) ENVIRONMENT TARGET_STACK_NAME"
    exit
else
    ENVIRONMENT=$1
    TARGET_STACK_NAME=${2}
fi

STACK_NAME="${APP_NAME}-${ENVIRONMENT}"

TARGET_VPC_ID=$(vpc_id_from_stack_name ${TARGET_STACK_NAME})

SELF_VPC_ID=$(vpc_id_from_stack_name ${STACK_NAME})
echoerr "INFO: ${STACK_NAME} VPC_ID: ${SELF_VPC_ID}"

HOSTED_ZONE=$(stack_resource_id ${STACK_NAME} InternalRoute53HostedZone)
echoerr "INFO: ${STACK_NAME} InternalRoute53HostedZone: ${HOSTED_ZONE}"

SELF_DOMAIN_NAME=$(aws route53 list-hosted-zones \
    --region ${AWS_REGION} \
    --query "HostedZones[?Id=='/hostedzone/${HOSTED_ZONE}'].Name" \
    --output text \
    | sed 's/\.$//')
echoerr "INFO: Hosted zone domain name: ${SELF_DOMAIN_NAME}"

CLIENT_VPCS=($(aws ec2 describe-vpc-peering-connections \
    --filters \
        Name=requester-vpc-info.vpc-id,Values=${SELF_VPC_ID} \
        Name=status-code,Values=active,pending-acceptance,provisioning \
    --query "VpcPeeringConnections[].AccepterVpcInfo.VpcId" \
    --output text))

if ! contains ${TARGET_VPC_ID} ${CLIENT_VPCS[@]}; then
    echoerr "ERROR: VPC '${TARGET_VPC_ID}' is not associated with target '${TARGET_VPC_ID}'"
    exit 1
fi

read -s -n1 -p "Press the any key to route53 reassociate '${TARGET_VPC_ID}' to '${SELF_VPC_ID}'"
echoerr

route53_vpc_dissociate ${HOSTED_ZONE} ${TARGET_VPC_ID}

route53_vpc_associate ${HOSTED_ZONE} ${TARGET_VPC_ID}

echoerr "INFO: Reassociation complete"

