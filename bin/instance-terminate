#!/usr/bin/env bash
#
# This script makes it easy to properly terminate an instance that was launched
# inside an Auto-Scaling Group. You can simply `aws ec2 terminate-instance`,
# but this has the, slightly, undesired consequence of relying on the health
# checks to fail, which may take many minutes, before the instance is replaced.
#

export MOON_FILE=false

source $(dirname $0)/../moon.sh

[[ $# -lt 1 ]] \
    && echoerr "Usage: $(basename $0) INSTANCE_ID [INSTANCE_ID]" \
    && exit \
    || INSTANCES=($@)

for instance_id in ${INSTANCES[@]}; do
    if [[ ${instance_id} =~ ^i-[a-f0-9]*$ ]]; then
        ELB_JSON=$(aws elb describe-load-balancers --region ${AWS_REGION})

        ELB_NAME=$(echo $ELB_JSON \
            | jq -r ".LoadBalancerDescriptions[] | select(.Instances[].InstanceId == \"${instance_id}\") | .LoadBalancerName")

        if [[ ${ELB_NAME-} ]]; then
            echoerr "INFO: Deregistering '${instance_id}' from ELB '${ELB_NAME}'"
            aws elb deregister-instances-from-load-balancer \
                --region ${AWS_REGION} \
                --load-balancer-name ${ELB_NAME} \
                --instances ${instance_id}
        fi

        echoerr "INFO: Terminating instance '${instance_id}'"
        aws autoscaling terminate-instance-in-auto-scaling-group \
            --region ${AWS_REGION} \
            --no-should-decrement-desired-capacity \
            --instance-id ${instance_id}
    else
        echoerr "ERROR: Instance ID '${instance_id}' is invalid"
    fi
done
