#!/usr/bin/env bash
#
# Create a multi-domain certificate from letsencrypt
#
# Assumptions:
#   * Multi-domain certificates are stored in IAM as the first domain name referenced.
#   * Stack parameters are set up to use the first domain name as the certificate name.
#

export MOON_FILE=false

source $(dirname $0)/../moon.sh

if [[ $# -lt 1 ]]; then
    echoerr "Usage: $(basename $0) DOMAIN_NAME [DOMAIN_NAME]"
    echoerr
    echoerr "Note: Add as many specific domain names as you require as args"
    echoerr
    echoerr "Example:"
    echoerr "    $ $(basename $0) foo.example.com bar.example.com"
    exit 0
else
    DOMAINS=(${@})
fi

KEY_BITS="4096"

clean_exit () {
    [[ $# == 0 ]] \
        && local retr=0 \
        || local retr=$1
    local file

    echoerr "INFO: Cleaning up temporary files"
    for file in ${CERT_FILE} ${KEY_FILE} ${CA_FILE}; do
        if [[ -f ${file} ]]; then
            echoerr "INFO: Removing '${file}'"
            rm -f ${file}
        else
            echoerr "INFO: Skipping non-existent file '${file}'"
        fi
    done

    exit ${retr}
}

pushd ${MOON_VAR} >/dev/null
    if [[ ! -d "${HOME}/.acme.sh/${DOMAINS[0]}" ]]; then
        echoerr "WARNING: You have not administered this domain before"
    elif [[ ! -f "${HOME}/.acme.sh/${DOMAINS[0]}/${DOMAINS[0]}.key" ]]; then
        echoerr "WARNING: You are missing the domain's key '${HOME}/.acme.sh/${DOMAINS[0]}/${DOMAINS[0]}.key'"
    else
        echoerr "INFO: Found domain key '${HOME}/.acme.sh/${DOMAINS[0]}/${DOMAINS[0]}.key'"
    fi

    echoerr "INFO: Creating temporary files"
    CERT_FILE=$(mktemp)
    KEY_FILE=$(mktemp)
    CA_FILE=$(mktemp)

    echoerr "INFO: CERT_FILE=${CERT_FILE}"
    echoerr "INFO: KEY_FILE=${KEY_FILE}"
    echoerr "INFO: CA_FILE=${CA_FILE}"

    if [[ ! -f "./acme.sh/acme.sh" ]]; then
        echoerr "INFO: Cloning acme"
        git clone https://github.com/Neilpang/acme.sh acme.sh \
            || clean_exit 1
    fi

    echoerr "INFO: Issuing certificate"
    ./acme.sh/acme.sh --issue \
        $(for domain in ${DOMAINS[@]}; do
            echo "-d ${domain}"
        done) \
        --server letsencrypt
        --dns dns_aws \
        --keylength ${KEY_BITS} \
        --cert-file ${CERT_FILE} \
        --key-file ${KEY_FILE} \
        --ca-file ${CA_FILE} \
        --fullchain-file /dev/null \
        || clean_exit 1

    echoerr "INFO: Uploading to IAM"
    iam-certificate-update ${DOMAINS[0]} ${CERT_FILE} ${KEY_FILE} ${CA_FILE}

    if [[ $? -gt 0 ]]; then
        echoerr "WARNING: iam-certificate-update did not exit 0. Keeping temporary files."
    else
        clean_exit
    fi

popd >/dev/null
